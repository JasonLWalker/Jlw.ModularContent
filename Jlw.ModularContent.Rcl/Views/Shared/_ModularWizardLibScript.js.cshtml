@using Jlw.ModularContent
@{
	Layout = null;
	Context.Response.ContentType = "application/javascript";
}
<script>
function libJlwWizardBase(t, $, initOptions, undefined) {
    var currSection = 0;
    var currStep = 0;
    var lastSection = 0;
    var lastStep = 0;

    t.wizardFields = t.wizardFields || [];
    t.wizardParent = $(window.document);

    t.debugLevel = t.debugLevel || 0;
    t.renderWizard = t.renderWizard || renderWizard;
    t.renderValidFormFields = t.renderValidFormFields || renderValidFormFields;
    t.renderInvalidFormFields = t.renderInvalidFormFields || renderInvalidFormFields;

    t.initializeWizard = t.initializeWizard || initializeWizard;

    t.fnOnClickNav = t.fnOnClickNav || fnOnClickNav;
    t.fnOnClickBack = t.fnOnClickBack || fnOnClickBack;
    t.fnOnClickLink = t.fnOnClickLink || fnOnClickLink;
    t.fnOnClickSave = t.fnOnClickSave || fnOnClickSave;
    t.fnOnClickAction = t.fnOnClickAction || fnOnClickAction;
    t.fnOnWizardOnLoad = t.fnOnWizardOnLoad || fnOnWizardOnLoad;
    t.fnGetElementDebug = t.fnGetElementDebug || fnGetElementDebug;
	t.fnRenderElementDebug = t.fnRenderElementDebug || fnRenderElementDebug;
    t.onRenderWizardFormField = t.onRenderWizardFormField || onRenderWizardFormField;
    t.onRenderWizardElement = t.onRenderWizardElement || onRenderWizardElement;
    t.onRenderWizard = t.onRenderWizard || onRenderWizard;

    t.ajaxFail = t.ajaxFail || ajaxFail;
    t.navTo = t.navTo || navTo;
    t.navToStep = t.navToStep || navToStep;
    t.navToScreen = t.navToScreen || navToScreen;
    t.navToWizardScreen = t.navToWizardScreen || navToWizardScreen;


    t.saveStep = t.saveStep || saveStep;

    if (initOptions)
        t.initializeWizard(initOptions);

    function initializeWizard(opts) {
        $ = opts['$'] || $;
        t.urlRoot = opts['urlRoot'] || t.urlRoot;
        t.urlApiRoot = opts['urlApiRoot'] || t.urlApiRoot || t.urlRoot;
        t.debugLevel = opts['debugLevel'] || t.debugLevel;
        t.onRenderWizardFormField = opts["onRenderWizardFormField"] || t.onRenderWizardFormField;
        t.onRenderWizardElement = opts["onRenderWizardElement"] || t.onRenderWizardElement;
        t.onRenderWizard = opts["onRenderWizard"] || t.onRenderWizard;
        t.wizardParent = $(opts["wizardParent"]) || t.wizardParent;
        $(".list-group.wizard-nav button").off().on('click', t.fnOnClickNav);
        t.populateFormData(opts["formData"] || {}, t.wizardParent);
        t.renderWizardFormField = renderWizardFormField;
        t.renderButton = renderButton;
    }

    function fnOnClickNav(evt) {
        var btn = $(evt.delegateTarget);
        var section = btn.data('section');
        var step = btn.data('step');
        var wizard = btn.data('wizard');
        var screen = btn.data('screen');
        var fn = btn.data('fnclick');
        if (fn && typeof t[fn] == 'function') {
	        var ret = t[fn](evt);
	        if (ret === false)
		        return false;
        }
        t.navTo(screen, wizard, section, step);
        return false;
    }

    function fnOnClickBack(evt) {
        var btn = $(evt.delegateTarget);
        var section = lastSection;
        var step = lastStep;
        t.navToStep(section, step);
        return false;
    }

    function fnOnClickLink(evt) {
        var btn = $(evt.delegateTarget);
        var url = btn.data('url');
        window.location = url.replace('~/', t.urlRoot);
        return false;
    }

    function fnOnClickSave(evt) {
        var btn = $(evt.delegateTarget);
        var section = btn.data('section');
        var step = btn.data('step');
        var fn = btn.data('fnclick');
        if (fn && typeof t[fn] == 'function') {
	        var ret = t[fn](evt);
	        if (ret === false)
		        return false;
        }
        t.saveStep(section, step);
        return false;
    }

    function fnOnClickAction(evt) {
        var btn = $(evt.delegateTarget);
        switch (btn.data("type")) {
        case 'nav':
            return t.fnOnClickNav(evt);
        case 'save':
            return t.fnOnClickSave(evt);
        case 'back':
            return t.fnOnClickBack(evt);
        case 'link':
            return t.fnOnClickLink(evt);
        default:
            var fn = btn.data('fnclick');
            if (fn && typeof t[fn] == 'function') {
                return t[fn](evt);
            }
            break;
        }

        return false;
    }

    function fnOnChange(evt) {
        var o = $(evt.delegateTarget);
        var fn = o.data('fnChange');
        if (fn && typeof t[fn] == 'function') {
            return t[fn](evt);
        }
        return false;
    }

    function navTo(screenId, wizard, section, step) {
        var frmData = t.serializeFormToJson($('.wizard-form'));
        frmData["Wizard"] = wizard || "";
        frmData["Screen"] = screenId || "";
        frmData["Section"] = frmData["Section"] || section || "";
        frmData["Step"] = frmData["Step"] || step || "";
        var prm = t.post(t.urlApiRoot, frmData, null, ajaxFail).done(function(data, status, jqXhr) { renderWizard(section || 0, step || 0, data); });
        $("input,select,textarea", $('.wizard-form')).prop("disabled", true);
        return prm;
    }

    function navToStep(section, step) { return navTo("", "", section, step); }

    function navToWizardScreen(wizard, screenId) { return navTo(screenId, wizard, "", ""); }

    function navToScreen(screenId) { return navTo(screenId, "", "", ""); }

    function renderButton(o) {
        var fieldData = o["FieldData"] || {};
        if (!$.isPlainObject(fieldData) && typeof(fieldData) === 'string') {
			try {
                fieldData = $.parseJSON(fieldData);
            } catch {
				// JSON Parse error, do nothing
            }
        }
        var hideLabel = fieldData["hideLabel"] || false;
        var labelClass = fieldData["labelClass"] || "";

        var icon = o['Icon'] ? '<span class="' + o['Icon'] + '" /></span> ' : '';
        var col = $('<div class="' + o["Wrapper"] + '"></div>');
        var action = o["Action"] || {}
        var data = '';
        if (action['type']) data += ' data-type="' + action['type'] + '"';
        if (action['screen']) data += ' data-screen="' + action['screen'] + '"';
        if (action['section']) data += ' data-section="' + action['section'] + '"';
        if (action['step']) data += ' data-step="' + action['step'] + '"';
        if (action['url']) data += ' data-url="' + action['url'] + '"';
        if (action['fnClick']) data += ' data-fnclick="' + action['fnClick'] + '"';
        var html = '<button type="button" class="' + o["Class"] + '" ' + data + '>' + icon;
        if (!hideLabel) { 
            if (labelClass)
				html += '<span class="' + labelClass + '">' + o["Label"] + '</span>'; 
            else 
				html += o["Label"]; 
        }
        html += '</button>';

        var btn = $(html);
        col.append(btn);
        btn.on('click', fnOnClickAction);

        o['ElementId'] = o['GroupKey'] + '-' + o['FieldType'] + '-' + o['FieldKey'] + '-' + (o['Id']||(new Date()).valueOf());
        //o['ElementObject'] = btn;
        //o['ElementContainer'] = col;
        btn.attr('id', 'jlwButton-' + o['ElementId']);
        col.attr('id', 'jlwContainer-'+o['ElementId']);

        if (typeof(t.onRenderWizardElement) === 'function') {
            t.onRenderWizardElement(btn, o, col);
        }

        col.attr('data-field-type', '@nameof(WizardFieldTypes.BUTTON)');

        return col;
    }

    function setButtonAction(btnWrapper, action) {
    }

	function fnRenderElementDebug($elem, dta) {
		$elem.prepend(t.fnGetElementDebug(dta));
	}

	function fnGetElementDebug(dta) {
		if (t.debugLevel < 1)
			return;

		var type = 'Field: ';
		switch ((dta["FieldType"] || "").toLowerCase()) {
		case 'screen':
			type = 'Screen: ';
			break;
		case 'heading':
		case 'body':
			type = '';
			break;
		case 'form':
			type = 'Form: ';
			break;
		case 'button':
			type = 'Button: ';
			break;
		}
		return '<div class="text-muted fs-6 fw-normal mb-0 text-truncate" title="' + type + dta['FieldKey'] + '"><small>[<span class="fst-italic">' + type + '</span>' + dta['FieldKey'] + ']</small></div>';
	}

    function renderWizardButtons(buttons) {
        var btns = $('.wizard-buttons');
        btns.empty();
        for (var i = 0; i < buttons.length; i++) {
            var o = buttons[i];
            var btn = renderButton(o);
            btns.append(btn);
            setButtonAction(btn, o["Action"] || "");
        }
    }

    function renderWizardForm(data, parent) {
        var wrapper = $("<div></div>");
        var formCard = $('<div></div>');
        var formBody = $('<div class="form-body"></div>');
        var headingText = data["Label"];
        var fields = data['Fields'] || [];
        var fieldData = data["FieldData"] || {};
        if (!$.isPlainObject(fieldData) && typeof(fieldData) === 'string') {
			try {
                fieldData = $.parseJSON(fieldData);
            } catch {
				// JSON Parse error, do nothing
            }
        }
        var hideLabel = fieldData["hideLabel"] || false;
        var labelClass = fieldData["labelClass"] || "h5";

        var wrapperStart = data["WrapperHtmlStart"] || "";
        var wrapperEnd = data["WrapperHtmlEnd"] || "";
        
        if ((data["FieldType"] || '').toLowerCase() == 'embed')
        {
	        formBody.removeClass("form-body");
            wrapper.addClass("embed-body");
        } 

        wrapper.append(formCard);

        var i = 0;

        if (data['WrapperClass'])
            wrapper.addClass(data['WrapperClass']);

        if (data['FieldClass'])
            formBody.addClass(data['FieldClass']);

        for (i = 0; i < fields.length; i++) {
            data["UsedFields"][fields[i]["FieldKey"]] = true;
            renderWizardFormField(fields[i], formBody);
        }

        var btn = "";
        if (data["UseCardLayout"]) {
            formCard.addClass('card');
            if (data["Label"] && !hideLabel) {
                var header = $('<div class="card-header"><div class="' + labelClass + '">' + headingText + '</div></div>');
                if (data["EditButton"] && typeof (data["EditButton"]) == "object") {
                    btn = renderButton(data["EditButton"]);
                    btn.addClass('float-end');
                    header.prepend(btn);
                }
                formCard.append(header);
            }
            var cardBody = $('<div class="card-body"></div>');
            cardBody.append(formBody);
            formCard.append(cardBody);
        } else {
            formCard.append(formBody);
        }
        var id = (data['GroupKey'] + '-' + data['FieldType'] + '-' + data['FieldKey'] + '-' + (data['Id']||(new Date()).valueOf())).replace(/[^\w\d-_]/i, '');

        data['ElementId'] = id;
        //formBody.attr('id', 'jlwElement-' + data['ElementId']);
        wrapper.attr('id', 'jlwElement-'+data['ElementId']);

        if(wrapperStart)
			formCard.before($(wrapperStart));

        if(wrapperEnd)
			formCard.after($(wrapperEnd));

        if (typeof(t.onRenderWizardElement) === 'function') {
            t.onRenderWizardElement(wrapper, data, wrapper);
        }


        //$(".wizard-body").append(wrapper);
        if (data["EditButton"] && typeof (data["EditButton"]) == "object" && typeof (btn) == "object") {
            setButtonAction(btn, data["EditButton"]["Action"] || "");
        }

        return wrapper;
    }

    // Callback when a form field is rendered
    function onRenderWizardFormField(obj, data, parent) { 
		var $obj = $(obj);
		switch ((data["FieldType"] || "").toLowerCase()) {
		case 'heading':
		case 'buttongroup':
		case 'body':
		case "separator":
		case "vseparator":
		case "undefined":
		case "":

			break;
		default:
			t.fnRenderElementDebug($obj, data);
			break;
		}

        return obj; 
    }

    // Callback when a form field is rendered
    function onRenderWizardElement(obj, data, parent) { 
		var $obj = $(obj);
		switch ((data["FieldType"] || "").toLowerCase()) {
		case "undefined":
		case "":
		case "separator":
		case "vseparator":
			break;
		default:
			t.fnRenderElementDebug($obj, data);
			break;
		}
		return obj;
    }

    // Callback when a wizard is rendered
    function onRenderWizard(obj, data, parent) { 
		var $obj = $('form', obj);
		t.fnRenderElementDebug($obj, data);
        window.scrollTo(0,0);
        return obj; 
    }

    function renderWizardElement(data, parent, wizardData) {
        var obj = {};
        if (typeof (data) !== 'object' || typeof (data['FieldType']) !== 'string')
            return obj;


        var type = data['FieldType'] || "";
        switch (type.toUpperCase()) {
            case '@nameof(WizardFieldTypes.HEADING)':
                $('.wizard-heading', parent).empty();
                obj = renderWizardFormField(data, $('.wizard-heading', parent));
				$('.wizard-heading', parent).addClass(data['WrapperClass'] || "h3");
                break;
            case '@nameof(WizardFieldTypes.BODY)':
                $('.wizard-body', parent).empty();
                obj = renderWizardFormField(data, $('.wizard-body', parent));
                if (data['WrapperClass'])
	                $('.wizard-body', parent).addClass(data['WrapperClass']);
                break;
        }

        if (obj && obj.length < 1)
            return {};

        if (typeof(t.onRenderWizardElement) === 'function')
            obj = t.onRenderWizardElement(obj, data, parent);
        return obj;
    }

    function renderWizardFormField(data, parent) {
        var field = data["FieldType"] || "";
        var fieldData = data["FieldData"] || {};
        var type = fieldData["type"] || "";
        var values = fieldData["values"] || fieldData["data"] || {};
        var group = data["GroupKey"];
        var name = data["FieldKey"];
        var label = data["Label"] || "&nbsp;";
        var labelClass = fieldData["labelClass"] || "";
        var groupClass = fieldData["groupClass"];
        var wrapperClass = data["WrapperClass"] || "";
        var wrapperStart = data["WrapperHtmlStart"] || "";
        var wrapperEnd = data["WrapperHtmlEnd"] || "";
        var isInline = fieldData["inline"] || false;
        var hideLabel = fieldData["hideLabel"] || false;

        var obj;
        var id = group + '-' + field + '-' + name + '-' +(data['Id']||(new Date()).valueOf());
        id = (id).replace(/[^\w\d-_]/i, '');

        var props = '';
        
        if (type.toLowerCase() != 'radio') {
            props += ' id="' + id + '" ';
        }

        if (fieldData["props"])
            props += fieldData['props'] + ' ';

        if (fieldData["properties"])
	        props += fieldData['properties'] + ' ';


        switch (field.toLowerCase()) {
            case 'button':
                var icon = fieldData['icon'] || "";
                var action = fieldData['action'] || {};
                obj = renderButton({
                    "Class": data['FieldClass'],
                    "Icon": icon,
                    "Action": action,
                    "Wrapper": wrapperClass,
                    "Label": label,
                    "Id": data['Id'],
                    "GroupKey": group,
                    "FieldKey": name,
                    "FieldType": field,
                    "FieldData": fieldData,
                    "FieldClass": data['FieldClass'],
                    "ParentKey": data['ParentKey'],
                    "WrapperClass": wrapperClass,
                    "WrapperHtmlStart": wrapperStart,
                    "WrapperHtmlEnd": wrapperEnd
                });
                setButtonAction(obj, action || "");
                break;
            case 'form':
            case 'embed':
                obj = renderWizardForm({
                    "UseCardLayout": fieldData['useCardLayout'],
                    "Fields": [ ],
                    "Label": label,
                    "Id": data['Id'],
                    "GroupKey": group,
                    "FieldKey": name,
                    "FieldType": field,
                    "FieldData": fieldData,
                    "FieldClass": data['FieldClass'],
                    "ParentKey": data['ParentKey'],
                    "WrapperClass": wrapperClass,
                    "WrapperHtmlStart": wrapperStart,
                    "WrapperHtmlEnd": wrapperEnd
                });
                break;
            case 'separator':
                if (data["FieldClass"]) {
                    props += 'class="' + data.FieldClass + '" ';
                }

                obj = $('<div><hr ' + props + '/></div>');
                break;
            case 'vseparator':
                obj = $('<div><div class="vr ' + data["FieldClass"] + '" ' + props + '/></div>');
                break;
            case 'select':
                if (data["FieldClass"]) {
                    props += ' class="' + data.FieldClass + '" ';
                }

                var slct = $('<select name="' + name + '"' + props + '></select>');

                if (fieldData['onchange']) {
                    slct.data('fnChange', fieldData['onchange']);
                    slct.on('change', fnOnChange);
                }
                var html = '<div>' + wrapperStart;
                if (!hideLabel) {
					html += '<label id="lbl-' + id + '" for="' + id + '"' + ((labelClass) ? ' class="' + labelClass + '"' : '') + '>' + label + '</label>';
                } else {
					html += '<div id="lbl-' + id + '" class="d-none"></div>';
                }
                html += wrapperEnd + '</div>';

                obj = $(html);
				$('#lbl-' + id, obj).after(slct);

                if (values) {
                    if ($.isArray(values)) {
	                    for (var i = 0; i < values.length; i++) {
	                        var opt = values[i];
	                        var k = opt["Key"] || opt["key"] || '';
	                        var v = opt["Value"] || opt["value"] || '';
	                        slct.append($('<option value="' + k + '">' + v + '</option>'));
	                    }
                    } else if ($.isPlainObject(values)) {
                        for (var i in values) {
	                        var k = i;
	                        var v = values[i] || '';
	                        slct.append($('<option value="' + k + '">' + v + '</option>'));
                        }                        
                    }
                }
                break;
            case 'input':
                switch (type.toLowerCase()) {
                    case 'hidden':
						var html = wrapperStart + '<div class="form-hidden">';
                        
                        if (!hideLabel) { html += '<span class="d-none">' + label + '</span>'; }

                        html += '<input type="hidden" name="' + name + '" ' + props + ' value="" /></div>' + wrapperEnd;
                        obj = $(html);
                        break;
                    case 'radio':
                        props += ' class="form-check-input" ';

                        var html = '<div' + (Object.keys(values).length > 0 ? ' id="' + id + '"' : "") + '>' + wrapperStart;

                        if (Object.keys(values).length > 0) {
                            var nCount = 1;
                            if (!hideLabel) {
								html += '<label for="' + id + '"' + ((labelClass) ? ' class="' + labelClass + '"' : '') + '>' + label + '</label>';
                            }
                            if (groupClass) {
                                html += '<div class="' + groupClass + '" id="' + id + '" >';
                            }
                            
                            if ($.isArray(values)) {
			                    for (var i = 0; i < values.length; i++) {
			                        var opt = values[i];
			                        var k = opt["Key"] || opt["key"] || '';
			                        var v = opt["Value"] || opt["value"] || '';
	                                html += '<div class="form-check' + (isInline ? " form-check-inline" : "") + ' ' + data.FieldClass + '"><input type="' + type.toLowerCase() + '" name="' + name + '" ' + props + ' value="' + k + '" id="' + id + '_' + nCount + '" /><label class="form-check-label ' + labelClass + '" for="' + id + '_' + nCount + '">' + v + '</label></div>';
	                                nCount++;
	                            }                            
                            } else if($.isPlainObject(values)) {
	                            for(var key in values) {
	                                html += '<div class="form-check' + (isInline ? " form-check-inline" : "") + ' ' + data.FieldClass + '"><input type="' + type.toLowerCase() + '" name="' + name + '" ' + props + ' value="' + key + '" id="' + id + '_' + nCount + '" /><label class="form-check-label ' + labelClass + '" for="' + id + '_' + nCount + '">' + values[key] + '</label></div>';
	                                nCount++;
	                            }
                            }
                            if (groupClass) {
                                html += '</div>';
                            }
                        } else {
                            html += '<div class="form-check' + (isInline ? " form-check-inline" : "") + ' ' + data.FieldClass + '"><input type="' + type.toLowerCase() + '" name="' + name + '" ' + props + ' id="' + id + '" /><label class="form-check-label ' + labelClass + '" for="' + id + '">' + label + '</label></div>';
                        }
                        html += wrapperEnd + '</div>';
                        obj = $(html);
                        break;
                    case 'checkbox':
                        if (data["FieldClass"])
                            props += ' class=" ' + data.FieldClass + '" ';
                        else 
                            props += ' class="form-check-input" ';

                        if (!labelClass) {
							labelClass = 'form-check-label';
                        }

                        obj = $('<div>' + wrapperStart + '<div class="form-check ' + (isInline ? "form-check-inline " : "") + groupClass + '"><input type="' + type.toLowerCase() + '" name="' + name + '" ' + props + '/><label class="' + labelClass + '" for="' + id + '">' + label + '</label></div>' + wrapperEnd + '</div>');
                        break;
                    case 'password':
                    case 'email':
                    case 'url':
                    case 'text':
                    case 'color':
                    case 'phone':
                    case 'search':
                        var defaultValue = fieldData['defaultValue'] || '';

	                    if (data["FieldClass"]) {
                            props += 'class="' + data.FieldClass + '" ';
                        }

                        if (fieldData["maxlength"]) {
                            props += 'maxlength="' + fieldData['maxlength'] + '" ';
						}

                        var html = '<div>' + wrapperStart;
                        
                       if (!hideLabel) {
	                        html += '<label for="' + id + '"' + ((labelClass) ? ' class="' + labelClass + '"' : '') + '>' + label + '</label>';
                        }
                        html += '<input type="' + type.toLowerCase() + '" name="' + name + '" value="' + defaultValue.replace('"', '\\"') + '"' + props + '/>' + wrapperEnd + '</div>';
						
 
                        obj = $(html);
                        break;
                    case 'range':
                    case 'number':
                        if (data["FieldClass"])
                            props += 'class="' + data.FieldClass + '" ';

                        if (fieldData["maxlength"])
                            props += 'maxlength="' + fieldData['maxlength'] + '"';

                        if (fieldData["min"])
                            props += 'min="' + fieldData['min'] + '"';

                        if (fieldData["max"])
                            props += 'max="' + fieldData['max'] + '"';

                        obj = $('<div>' + wrapperStart + '<label for="' + id + '"' + ((labelClass) ? ' class="' + labelClass + '"' : '') + '>' + label + '</label><input type="' + type.toLowerCase() + '" name="' + name + '" value=""' + props + '/>' + wrapperEnd + '</div>');
                        break;
                    case 'date':
                    case 'time':
                    case 'month':
                    case 'week':
                    case 'datetime-local':
                        if (data["FieldClass"])
                            props += 'class="' + data.FieldClass + '" ';

                        if (fieldData["pattern"])
                            props += 'pattern="' + fieldData['pattern'] + '"';

                        var html = '<div>' + wrapperStart;
                        
                        if (!hideLabel) { html += '<label for="' + id + '"' + ((labelClass) ? ' class="' + labelClass + '"' : '') + '>' + label + '</label>'; }

                        html += '<input type="' + type.toLowerCase() + '" name="' + name + '" value=""' + props + '/>' + wrapperEnd + '</div>';
                        obj = $(html);
                        break;
                }
                break;
            case 'textarea':
                if (data["FieldClass"])
                    props += 'class="' + data.FieldClass + '" ';


                obj = $('<div>' + wrapperStart + (label ? '<label for="' + id + '"' + ((labelClass) ? ' class="' + labelClass + '"' : '') + '>' + label + '</label>' : '') + '<textarea name="' + name + '" ' + props + '></textarea>' + wrapperEnd + '</div>');
                break;
            case 'heading':
            case 'body':
            case 'html':
                obj = $('<div>' + wrapperStart + label + wrapperEnd + '</div>');
                obj.addClass(data["FieldClass"]);
                break;
            default:
                break;
        }

        if (obj) {
            $(obj).attr("id", 'jlwContainer-' + id);

            $('input[id=""], input:not([id])', obj).each(function (i) {

                var id = $(this).prop("name") + '_' + i + '_' + (new Date()).valueOf();
                $(this).attr("id", id);
            });

            if (wrapperClass && field.toLowerCase() !== 'heading')
                obj.addClass(wrapperClass);

            // Process extra rendering if needed.
            t.onRenderWizardFormField(obj, data, parent);

            parent.append(obj);
            obj.attr('data-field-type', field);
        }
        return obj;
    }

    function renderWizard(section, step, data) {
        var heading = data["HeadingData"] || data["Heading"] || "";
        var body = data["BodyData"] || data["Body"] || "";
        var buttons = data["Buttons"];
        var forms = data["Forms"] || [];
        var fieldData = data["FieldData"] || {};
        var fieldType = (data["FieldType"] || "").toUpperCase();
        var fieldKey = data["FieldKey"] || "";
        var parentKey = data["ParentKey"] || "";
        var wizardWrapperStart = data["WrapperHtmlStart"] || "";
        var wizardWrapperEnd = data["WrapperHtmlEnd"] || "";
        var screen = fieldType === "@nameof(WizardFieldTypes.SCREEN)" ? fieldKey : "";
        var wizard = fieldType === "@nameof(WizardFieldTypes.SCREEN)" ? parentKey : "";
        var usedFields = {};
        var i;

        if (typeof(heading) === 'string')
            data["Heading"] = heading = { 'GroupKey':data["GroupKey"], 'FieldKey':'Heading', 'FieldType':'HEADING', 'Label': heading };

        //var wizardFormHtml = wizardWrapperStart + $('.wizard-form > form').html() + wizardWrapperEnd;
        $('.wizard-header').remove();
        $('.wizard-body').remove();
        $('.wizard-buttons').remove();
        $('.wizard-form > form').empty().html(wizardWrapperStart + "<div class='wizard-heading'></div><div class='wizard-body'></div><div class='wizard-buttons row'></div>" + wizardWrapperEnd);


        heading["FieldType"] = "@nameof(WizardFieldTypes.HEADING)";


        renderWizardElement(heading, t.wizardParent, data);

        if (typeof(body) === 'string')
            data["Body"] = body = { 'GroupKey':data["GroupKey"], 'FieldKey':'Body', 'FieldType':'@nameof(WizardFieldTypes.BODY)', 'Label': body };

        body["FieldType"] = "@nameof(WizardFieldTypes.BODY)";

        renderWizardElement(body, t.wizardParent, data);

        renderWizardButtons(buttons || []);
        var objForm;
        if (forms && forms.length) {
	        for (i = 0; i < forms.length; i++) {
		        forms[i]["UsedFields"] = usedFields;
		        objForm = renderWizardForm(forms[i] || { 'UsedFields': usedFields });
		        usedFields = forms[i]["UsedFields"];
		        $('.wizard-body').append(objForm);
	        }
        } else {
	        objForm = renderWizardForm({ 'UsedFields': usedFields });
	        $('.wizard-body').append(objForm);
        }

        var formBody = $(".wizard-body");
        formBody.attr('class', 'wizard-body');
        formBody.addClass(data['FieldClass']);

        for (i = 0; i < t.wizardFields.length; i++) {
	        if (!usedFields[t.wizardFields[i]])
		        formBody.append($('<input type="hidden" name="' + t.wizardFields[i] + '" value="" />'));
        }

        if (data["FormData"]) {
	        t.renderInvalidFormFields(data["FormData"]['InvalidFields']);
	        t.renderValidFormFields(data["FormData"]['ValidFields']);
	        section = data["FormData"]["Section"] || section;
	        step = data["FormData"]["Step"] || step;
        }
        if (currSection != section || currStep != step) {
	        lastSection = currSection;
	        lastStep = currStep;

	        currSection = section;
	        currStep = step;
        }

        $('.wizard-nav button').removeClass('active');
        var nav = {};
        
        if (fieldData['sideNav'] && fieldData.sideNav['screen'])
	        nav = $('.wizard-nav button[data-screen=' + fieldData.sideNav.screen + ']').first();
        if (!nav.length && wizard && screen )
	        nav = $('.wizard-nav button[data-wizard=' + wizard + '][data-screen=' + screen + ']').first();
        if (!nav.length && screen )
	        nav = $('.wizard-nav button[data-screen=' + screen + ']').first();
        if (!nav.length && section != undefined && step != undefined)
	        nav = $('.wizard-nav button[data-section=' + section + '][data-step=' + step + ']').first();
        if (!nav.length && section != undefined)
	        nav = $('.wizard-nav button[data-section=' + section + ']').first();
        if (nav.length)
	        nav.addClass('active');

        $('input[type!=hidden], select, textarea, button', $('.wizard-form')).first();

        t.populateFormData(data["FormData"] || {}, $('.wizard-form'));

        if (typeof(t.fnOnWizardOnLoad) === 'function') {
            t.fnOnWizardOnLoad(data, formBody);
        }

        var obj = $('.wizard-form');
        if (data["WrapperClass"])
	        obj.addClass(data["WrapperClass"]);

        if (typeof(t.onRenderWizard) === 'function')
	        obj = t.onRenderWizard(obj, data, t.wizardParent);



        return obj;
    }

    function fnOnWizardOnLoad(data, formBody) {
	    var fieldData = data["FieldData"] || {};

	    if (fieldData["onload"]) {
		    var fn = new Function('data', 'lib', 'form', 'try{ ' + fieldData['onload'] + '; } catch(ex) { if(console){console.log(ex)} }');
		    window.setTimeout(function() { fn(data, t, formBody); }, 1);
	    }
    }

    function renderValidFormFields(validFields) {
	    if (validFields) {
		    for (var key in validFields) {
			    var feedback = validFields[key];
			    var o = $('input[type!=hidden][type!=radio][name=' + key + '], select[name=' + key + '], textarea[' + key + ']', $('.wizard-form')).first();
			    var id;
			    if (o.length > 0) {
				    o.addClass('is-valid');
				    if (o[0] && feedback) {
					    id = o[0].id;
					    o.attr('aria-describedby', id + "Feedback");
					    o.closest('div[id^=jlwContainer]').append($('<div id="' + id + 'Feedback" class="valid-feedback">' + feedback + '</div>'));
					    nCount++;
				    }
			    } else {
				    o = $('input[type=radio][name=' + key + ']', $('.wizard-form'));
				    o.addClass('is-valid');
				    if (o[0] && feedback) {
					    id = o[0].id;
					    o.attr('aria-describedby', id + "Feedback");
					    o.closest('div[id^=jlwContainer]').append($('<div id="' + id + 'Feedback" class="valid-feedback d-inline-block">' + feedback + '</div>'));
					    nCount++;
				    }

			    }
			    /*
                o.addClass('is-valid');
			    if (o[0] && feedback) {
				    id = o[0].id;
				    o.attr('aria-describedby', id + "Feedback");
				    o.parent().append($('<div id="' + id + 'Feedback" class="valid-feedback">' + feedback + '</div>'));
			    }
                */
		    }
	    }
    }

    function renderInvalidFormFields(invalidFields) {
	    if (invalidFields) {
		    var nCount = 0;
		    for (var key in invalidFields) {
			    var feedback = invalidFields[key];
			    var o = $('input[type!=hidden][type!=radio][name=' + key + '], select[name=' + key + '], textarea[name=' + key + ']', $('.wizard-form')).first();
			    var id;
			    if (o.length > 0) {
				    o.addClass('is-invalid');
				    if (o[0] && feedback) {
					    id = o[0].id;
					    o.attr('aria-describedby', id + "Feedback");
					    o.closest('div[id^=jlwContainer]').append($('<div id="' + id + 'Feedback" class="invalid-feedback">' + feedback + '</div>'));
					    nCount++;
				    }
			    } else {
				    o = $('input[type=radio][name=' + key + ']', $('.wizard-form'));
				    o.addClass('is-invalid');
				    if (o[0] && feedback) {
					    id = o[0].id;
					    o.attr('aria-describedby', id + "Feedback");
					    o.closest('div[id^=jlwContainer]').append($('<div id="' + id + 'Feedback" class="invalid-feedback d-inline-block">' + feedback + '</div>'));
					    nCount++;
				    }

			    }
		    }
		    if (nCount > 0) {
			    $('.wizard-body').prepend('<div class="text-danger ">&bull; Please correct the information below before submitting the form.</div>');
		    }
	    }
    }

    function ajaxFail(jqXhr, textStatus, errorThrown) {
	    var data = null;
	    var re = new RegExp('application/json', 'i');
	    if (re.test(jqXhr.getResponseHeader("content-type"))) {
		    data = jQuery.parseJSON(jqXhr.responseText);
	    } else {
		    data = { Message: jqXhr.status + " - " + textStatus + ": " + errorThrown, MessageType: t.messageTypes.Danger, 'Title': 'An error has occurred' }
	    }


	    if (jqXhr && (jqXhr["status"] >= 400 || jqXhr["status"] < 500) && jqXhr["getResponseHeader"]) {
		    // jqXhr is only populated on fail
		    var loc = jqXhr.getResponseHeader("location");
		    if (loc) {
			    jqXhr["status"] = 401;
		    }
	    }


	    t.checkAjaxMessage(data, textStatus, jqXhr);
	    t.hidePleaseWait();
	    return false;
    }

    function saveStep(section, step) {

	    var frmData = t.serializeFormToJson($('.wizard-form'));
	    frmData["Section"] = frmData["Section"] || section;
	    frmData["Step"] = frmData["Step"] || step;

	    var prm = t.post(t.urlApiRoot + "/Save", frmData, null, t.ajaxFail).done(function (data, status, jqXhr) {
		    t.renderWizard(section, step, data);
	    });
	    $("input,select,textarea", $('.wizard-form')).prop("disabled", true);
	    return prm;
    }

    function debug(level) {
	    if (t.debugLevel <= level) return;

	    if (console) {
		    switch (arguments.length) {
		    case 2:
			    console.log(arguments[1]);
			    break;
		    case 3:
			    console.log(arguments[1], arguments[2]);
			    break;
		    case 4:
			    console.log(arguments[1], arguments[2], arguments[3]);
			    break;
		    case 5:
			    console.log(arguments[1], arguments[2], arguments[3], arguments[4]);
			    break;
		    case 6:
			    console.log(arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
			    break;
		    case 7:
			    console.log(arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
			    break;
		    }
	    }
    }

    return t;
}
</script>