@using Newtonsoft.Json
@using System.Collections
@model Jlw.ModularContent.Areas.ModularContentEmailAdmin.Controllers.EmailAdminController.WizardAdminSettings
@{
    string apiUrl = (string.IsNullOrWhiteSpace(Model?.ApiOverrideUrl)) ? Url.Action("Index", "Api", new { Area = Model?.Area, groupKey = (string)null, parentKey = (string)null }) + "/" : Model.ApiOverrideUrl;
}
<script>

    if (!window.jlwLibLocalizedContentField) {
        window.jlwLibLocalizedContentField = function() {
            $.fn.dataTable.ext.errMode = 'none';
            var t = new libJlwAppBuilder('@apiUrl', '.jlw-dtlist-wizardemail table.jlw-datatable-wizardemail');

            @if (Model?.CanEdit ?? false)
            {
                <text>
                t.frmEdit = $('#jlwEditFormLocalizedContentField').html();

                t.showDialog = function (oData, frmEdit, sTitle, btns)
                {
                    var onClose = function(o) { t.destroyWysiwyg($(o.delegateTarget)); };
                    if (!btns) { btns = {}; }
                    if (!btns["no"]) { btns['no'] = { label: '<div class="text-left"><i class="fas fa-arrow-left"></i> Close</div>', className: 'btn btn-outline-danger', callback: onClose }; }
                    var oFrm = bootbox.dialog({ title: sTitle, message: frmEdit, onEscape: false, size: "large", buttons: btns });
                    t.populateFormData(oData, oFrm); $(".modal-lg", oFrm).addClass("modal-xl"); t.setModalOnTop(oFrm);
                    oFrm.data('parentLib', t);
                    t.initWysiwyg(oFrm);
                    if (oData && oData['Id']) {
                        $('.group-info', oFrm).addClass('d-none');
                    }
                    return oFrm;
                }

                function onEditLanguage(o) {
                    var elem = $(o);
                    var data = t.getParentData(o);
                    window.location = '@Model?.AdminUrl/' + data['GroupKey'] + '/' + data['FieldKey'];
                }


                t.optionsWysiwyg = @Html.Raw(JsonConvert.SerializeObject(Model?.TinyMceSettings ?? new object()));

                t.initTinyMce = t.initWysiwyg; // Save original initialization
                t.initWysiwyg = function (oFrm) {
                    t.initTinyMce(oFrm);
                    window.tinymce.PluginManager.add('insertplaceholder', function (editor, url) {
                        editor.ui.registry.addNestedMenuItem('insertplaceholder', {
                            text: 'Template Placeholders',
                            getSubmenuItems: function () {
                                return [
                                    @{
                                        if (Model?.PreviewRecordData is IEnumerable<KeyValuePair<string, string>> aMembers)
                                        {
                                            var n = 0;
                                            foreach (var kvp in aMembers)
                                            {
                                                <text>@(n++>0 ? ",": ""){ type: 'menuitem', text: '@kvp.Value', onAction: function () { editor.insertContent('[%@kvp.Key%]'); } }</text>
                                            }
                                        }
                                        else
                                        {
                                            var members = ((object)(Model?.PreviewRecordData ?? new { })).GetType().GetProperties();
                                            var n = 0;
                                            foreach (var member in members)
                                            {
                                                <text>@(n++>0 ? ",": ""){ type: 'menuitem', text: '@member.Name', onAction: function () { editor.insertContent('[%@member.Name%]'); } }</text>
                                            }
                                        }
                                    }
                                ];
                            }
                        });

                        return {
                            getMetadata: function () {
                                return {
                                    name: 'Template Placeholder',
                                    url: 'about:blank'
                                };
                            }
                        }
                    });
                }

		        // Prevent Bootstrap dialog from blocking focusin
		        document.addEventListener('focusin', function (e) {
		            if (e.target.closest('.tox-tinymce-aux, .moxman-window, .tam-assetmanager-root') !== null) {
		                e.stopImmediatePropagation();
		            }
		        });

                @if (string.IsNullOrWhiteSpace(Model.GroupKey) || string.IsNullOrWhiteSpace(Model.FieldKey))
                {
                    @:t.addDtRowButton('', 'btn-localize', '', 'btn-outline-secondary m-1', onEditLanguage);
                }

                function onPreviewRecord(oBtn) {
                    var oData = t.getParentData(oBtn);
                    t.post(t.sUrlRoot + "Preview", oData).done(function (data) {
                        bootbox.alert({ title: data['subject'], message: data['body'],size: "large"});
                        //console.log(a);
                    });
                }
                t.addDtRowButton('', 'btn-preview', 'fa fa-fw fa-search text-info', 'btn-outline-secondary m-1', onPreviewRecord);

                t.addDtRowButton('', 'btn-edit', 'fa fa-fw fa-pencil-alt text-warning', 'btn-outline-secondary m-1', t.onEditRecord);
            </text>
            }

            @if (Model?.CanDelete ?? false)
            {
                <text>
                function onDeleteRecord(oBtn) {
                    var oData = t.getParentData(oBtn);
                    @if (!string.IsNullOrWhiteSpace(Model?.GroupKey) && !string.IsNullOrWhiteSpace(Model?.FieldKey))
                    {
                        @:oData["LanguageFilter"] = oData["Language"];
                    }

                    function fnOnSuccessCallback(o) { return true; }
                    function fnDlgCallback(result) {
                        if (result) {
                            t.showPleaseWait();
                            t.post(t.sUrlRoot + "Delete", oData, fnOnSuccessCallback).always(t.redrawTable);
                        }
                    }
                    oData.EditToken = 'Edit';
                    var oFrm = bootbox.confirm("Are you sure you want to delete this record?", fnDlgCallback);
                    t.setModalOnTop(oFrm);
                }

                t.addDtRowButton('', 'btn-delete', 'fa fa-fw fa-trash-alt text-danger', 'btn-outline-secondary m-1', onDeleteRecord);
                </text>
            }

            t.fnPostDtAjaxData = function(d) {
                d.GroupKey = '@Model?.GroupKey';
                d.FieldKey = '@Model?.FieldKey';
                d.FieldType = 'EMAIL';
                d.Language = d.Language || '@Model?.Language';
                d.ParentKey = '@Model?.ParentKey';
            }

            t.addDtRenderer(function(data, type, row) {
                return '<a href="@Model?.AdminUrl/' + data + '">' + data + '</a>';
            }, [1]);

            t.addDtRenderer(function(data, type, row) {
                return '<a href="@Model?.AdminUrl/'+ row['GroupKey'] + '/' + data + '">' + data + '</a>';
            }, [2]);

            t.addDtRenderer(function(data, type, row) {
                var s = '<a href="@Model?.AdminUrl/'+ row['GroupKey'] + '">' + row['GroupKey']+ '</a> &gt; ';
                s += '<a href="@Model?.AdminUrl/'+ row['GroupKey'] + '/' + row["FieldKey"] + '">' + row['FieldKey'] + '</a> &gt; ';
                s += row['Language'] + " - ";
                s +=  row['Label'] + "<hr />";
                s += '<b>Email Subject:</b> ' + row['Subject'] + "<br />";
                s += '<div><strong>Email Body:</strong><br /><div class="email-body">' + row['Body'] + "</div></div>";
                return s;
            }, [10]);

            t.addDtRenderer(function(data, type, row) {
                // Do not output content for these columns
                row['WrapperHtmlStart'] = '';
                row['WrapperHtmlEnd'] = '';
                return t.dtRenderButtons(data, type, row);
            }, [18]);

            var dt = t.initializeDataTable(t.sDtSelector);

            dt.on('error.dt',
                    function(e, settings, techNote, message) {
                        if (console)
                            console.log('An error has been reported by DataTables: ', message);
                    })
                .on('xhr.dt', function ( e, settings, json, xhr ) {
                    var data = xhr["responseJSON"];
                    t.checkAjaxMessage(data);
                })
                .on('draw.dt', function(e, settings) {
                    var a = $('.btn-localize');
                    a.each(function(i, elem) {
                        var o = $(elem);
                        var data = t.getParentData(o);
                        o.append($('<span class="fa-layers fa-fw"><span class="fas fa-language"></span><span class="fa-layers-counter"  data-fa-transform="shrink-11 up-10 right-10" style="background:#0062cccc; font-size:2rem; top:-5px; right:-5px;">' + data['LocalizedCount'] + '</span></span>'));

                    });
                });



            @if (Model?.CanInsert ?? false)
            {
                @:t.addDtFooterButton(' Add New Record', 'btn-newrecord', 'fa fa-fw fa-plus', 'btn-primary mx-1', t.onAddRecord);
            }
            t.dtRenderFooterButtons();
            @if (Model?.CanInsert ?? false) {
                <text>
                    function onAddRecord(fnOnShow) {
                        function onShow(frm, data) {
                            if (typeof fnOnShow == "function") {
                                fnOnShow(frm, data);
                            }
                            $('input[name=GroupKey]', frm).val('@(Model?.GroupKey)');
                            if ($('input[name=GroupKey]', frm).val())
                                $('input[name=GroupKey]', frm).prop('disabled', true);

                            $('input[name=FieldKey]', frm).val('@(Model?.FieldKey)');
                            if ($('input[name=FieldKey]', frm).val())
                                $('input[name=FieldKey]', frm).prop('disabled', true);

                            $('input[name=FieldType]', frm).val('EMAIL');
                            $('select[name=Language]', frm).val('EN');
                            $('input[name=ParentKey]', frm).val('@(Model?.ParentKey)');
                        }
                        t.onAddRecord(onShow);
                    }

                    $('.btn-newrecord').off('click').on('click', onAddRecord);
                </text>
            }

        }
    }
</script>
