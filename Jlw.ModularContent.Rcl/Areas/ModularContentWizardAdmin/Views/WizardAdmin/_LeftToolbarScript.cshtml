@model Jlw.ModularContent.ModularWizardAdminSettings
@{
    string apiUrl = (string.IsNullOrWhiteSpace(Model?.ApiOverrideUrl)) ? Url.Action("Index", "Api", new { Area = Model?.Area ?? "", groupKey = (string)null, fieldKey = (string)null }) + "/" : Model?.ApiOverrideUrl;
}
@Html.PartialAsync("~/Areas/ModularContentWizardAdmin/Views/WizardAdmin/_AdminCss.cshtml").Result
<style>
    [id^="jlwContainer-"], [id^="jlwElement-"] {
        cursor: pointer;
        margin: 0.5em;
        padding: 5px;
        background: #fff;
        outline: 1px dotted #ccc;
        font-size: small;
    }
    [id^="jlwContainer--VSEPARATOR"] {
	    width: 100%;
    }

    [id^="jlwContainer--VSEPARATOR"] > .vr {
	    display: block;
	    margin: auto;
    }

    #leftToolbar .card {
        padding: 0;
    }

    #leftToolbar .card-header {
        padding: 0.5rem;
    }

    #leftToolbar .card-header .h5 {
        margin: 0;
        font-size: small;
    }

    #controllist > div, #componentlist > div {
        flex: unset;
    }

    .sortable-delete {
        display: none;
    }
</style>
<script>
    function libJlwLeftToolbarAdminExtension(t, $, initOptions, undefined) {
        if (!t.urlApiRoot)
            t.urlApiRoot = '@apiUrl';
        var reContainerId = /^(jlw[\w]+)-([\w\d_-]+)-([\w]+)-([\w\d_]+)-([\d]+)$/i;
        var clientFrameWindow = $('#preview-frame').get(0).contentWindow;
        var clientFrameBody = $(clientFrameWindow.document.body);
        var validButtonTypes = ['button'];
        var validFormTypes = ['embed','form'];
        var validFormFieldTypes = ['input', 'select', 'vseparator', 'separator', 'html', 'textarea', 'button'];

        var placeholder = $('<div class="sortable-hidden-placeholder" style="display:none" />');

        var libComponents = window.libJlwWizardBase(new window.libJlwUtility() || {},
            window.jQuery,
            {
                'urlRoot': '@Html.Raw(Url.Action("Index", "Home", new { Area = "" }))',
                'urlApiRoot': t.urlApiRoot,
                'onRenderWizardFormField': onRenderWizardFormField,
                'wizardParent': '#componentlist'
            }
        );

        var libControls = window.libJlwWizardBase(new window.libJlwUtility() || {},
            window.jQuery,
            {
                'urlRoot': '@Html.Raw(Url.Action("Index", "Home", new { Area = "" }))',
                'urlApiRoot': t.urlApiRoot,
                'onRenderWizardFormField': onRenderWizardFormField,
                'wizardParent': '#controllist'
            }
        );

        function onRenderWizardFormField(obj, data, parent) {
	        var o = $(obj);
	        if (o.attr('type') === 'hidden') {
		        var wrapper = $('<div class="col-12" draggable="true"></div>');
		        wrapper.attr('id', o.attr('id'));
		        o.attr('id', '');
		        o.attr('type', 'text');
		        o.replaceTagName('div');

		        parent.append(wrapper);
		        obj = wrapper;
		        o = wrapper;
	        }

	        o.data('wizard-data', data);
	        var cntrl = $('input, button, textarea, select', o);
	        cntrl.attr('data-field-type', (data['FieldType'] || "").toLowerCase());
	        $('input, button, textarea, select', o).replaceTagName('div');


	        var p = o.closest('[id^="jlwContainer-"]');
	        p.data('wizard-data', data);
	        p.data('tree-id', data['Id']);
	        p.attr('data-tree-id', data['Id']);

	        return obj;
        }

        function onLoadComponentList(event) {
	        return $.ajax({
		        url: t.urlApiRoot + "/Components/" + $('#slctWizard').val(),
		        dataType: "json"
	        }).done(function(wizardData) {

		        var parent = $(libComponents.wizardParent);

		        if ($('#showWireframe').is(':checked')) {
			        parent.addClass('bootstrap-sketchy');
		        } else {
			        parent.removeClass('bootstrap-sketchy');
		        }


		        parent.empty();
		        for (var i in wizardData) {
			        var data = wizardData[i];
					var elem = libComponents.renderWizardFormField(data, parent);
					if (elem) {
						elem.addClass('position-relative');
						if (data['UseCount']) {
	                        elem.append('<span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-info" title="Times used in wizard: ' + data['UseCount'] + '">'+ data['UseCount'] +'</span>');
						}
					}
		        }
		        parent.children().attr('draggable', true);
	        });
        }

        function onLoadControlList(event) {
	        return $.ajax({
		        url: t.urlApiRoot + "/Components/jlwNativeHtmlControls",
		        dataType: "json"
	        }).done(function(wizardData) {

		        var parent = $(libControls.wizardParent);

		        if ($('#showWireframe').is(':checked')) {
			        parent.addClass('bootstrap-sketchy');
		        } else {
			        parent.removeClass('bootstrap-sketchy');
		        }

		        parent.empty();
		        for (var i in wizardData) {
			        var data = wizardData[i];
			        var elem = libControls.renderWizardFormField(data, parent);
		        }
	        });
        }

        function onLoadTree(event, data) {
	        return $.ajax({
		        url: t.urlApiRoot + "/Tree/" + $('#slctWizard').val(),
		        dataType: "json"
	        }).done(function(data) {
		        var oScreen = $("select[name=buttonActionScreen]");
		        var actionScreen = oScreen.val();
				if (data.length && data[0]['children']) {
					clientFrameWindow.postMessage({ action: 'buildSideNav', navData: data[0].children });
				}
		        oScreen.empty();
		        oScreen.append($('<option value=""></option>'));
		        for (var i in data) {
			        var nodes = (data[i] || []);
			        var children = (nodes['children'] || []);
			        for (var k in children) {
				        var child = (children[k] || {});
				        var fieldData = (child['field_data'] || {});
				        var text = (fieldData['FieldKey'] || "");
				        try {
					        var reFilterPrefix = new RegExp("^@(Model.HiddenFilterPrefix)", "ig");
							text = text.replace(reFilterPrefix, '');
						} catch (e) { }

				        oScreen.append($('<option value="' + fieldData['FieldKey'] + '">' + text + '</option>'));
			        }
		        }
		        oScreen.val(actionScreen);
	        });
        }

        function onLoadTreeNode(event, data) {
	        try {
		        var nodes = data.node.getParentList(false, true);
		        var node = nodes[1];
		        var nodeData = node.data["field_data"];
		        if ((nodeData.FieldType || "").toUpperCase() == "SCREEN") {
			        var prm = t.post(t.urlApiRoot, { 'Wizard': nodeData.GroupKey, 'Screen': nodeData.FieldKey }, null, t.ajaxFail)
				        .done(function(resData, status, xhr) {
					        var msg = { action: 'loadWizard', wizardData: resData, nodeData: data.node.data['field_data'] };
					        var frame = clientFrameWindow;
					        frame.postMessage(msg);
				        });
		        }
	        } catch (ex) {
		        //
	        }
	        onLoadComponentList();
	        onLoadControlList();
	        t.loadProperties(data.node['key']);
        }

        function onLoadWizard(evt) {
	        t.get(t.urlApiRoot + "/List").done(function(data) {
		        var target = $('#slctWizard');
		        target.empty();

		        for (var i in data) {
			        var fieldData = data[i];
                    var text = fieldData["GroupKey"] || "";
					try {
				        var reFilterPrefix = new RegExp("^@(Model.HiddenFilterPrefix)", "ig");
				        var reFilterPrefix = new RegExp("^@(Model.HiddenFilterPrefix)", "ig");
				        text = text.replace(reFilterPrefix, '');
			        } catch (e) { }

                    var opt = $('<option value="' + fieldData["GroupKey"] + '">' + text + '</option>');
			        opt.attr('data-field-data', JSON.stringify(fieldData));
                    opt.data('tree-id', fieldData['Id']);
			        target.append(opt);
		        }

		        target.trigger('change');
	        });
        }

        function onChangeWizard(evt) {
	        window.postMessage({ 'action': 'updateTree' });
        }

        function onShowWizardNav(evt) {
	        var msg = { action: 'showSideNav', value: false };
	        var frame = document.getElementById('preview-frame').contentWindow;
	        if ($('#showWizardNav').is(':checked')) {
		        msg.value = true;
	        }
	        frame.postMessage(msg);
        }

        function onShowWireframe(evt) {
	        var id = clientFrameBody.find('.wizard-form').data('tree-id');

	        var tree = $.ui.fancytree.getTree("#wizardtree");
	        if (tree) {
		        tree.activateKey(0, { activeVisible: true });
		        tree.activateKey(id, { activeVisible: true });
	        }

	        if ($('#showWireframe').is(':checked')) {
		        clientFrameBody.addClass('bootstrap-sketchy');
	        } else {
		        clientFrameBody.removeClass('bootstrap-sketchy');
	        }

        }

		function addMenuSeparator(menuItems) {
			var k = 'sep' + (Date.now().valueOf() + Math.random());
			
			if($.isEmptyObject(menuItems)) 
				return;

            menuItems[k] = "---------";			
			return k;
		}

		function getContextMenu(fieldData) {
			var menuItems = {};
			var fieldType = (fieldData.FieldType || "").toUpperCase();
			var fieldKey = (fieldData.FieldKey || "").toUpperCase();
			
			if (['BODY', 'HEADING', 'BUTTONGROUP'].includes(fieldType)) {
				return menuItems;
			}

			if (['BODY', 'HEADING'].includes(fieldKey)) {
				return menuItems;
			}

			@if (Model.CanDuplicateWizard || Model.CanDuplicateScreen || Model.CanDuplicateField)
			{
				// Add Duplicate menu item 
				if (Model.CanDuplicateWizard)
				{
					@:if (fieldType === 'WIZARD' && !menuItems["duplicate"]) menuItems["duplicate"] = { "name": "Duplicate", "icon": "copy" };
				}
				if (Model.CanDuplicateScreen)
				{
					@:if (fieldType === 'SCREEN' && !menuItems["duplicate"]) menuItems["duplicate"] = { "name": "Duplicate", "icon": "copy" };
				}
				if (Model.CanDuplicateField)
				{
					@:if (fieldType !== 'WIZARD' && fieldType !== 'SCREEN' && !menuItems["duplicate"]) menuItems["duplicate"] = { "name": "Duplicate", "icon": "copy" };
				}
			}
			@if (Model.CanRenameWizard || Model.CanRenameScreen || Model.CanRenameField)
			{
				// Add Rename menu item
				if (Model.CanRenameWizard)
				{
					@:if (fieldType === 'WIZARD' && !menuItems["rename"]) menuItems["rename"] = { "name": "Rename", "icon": "edit" };
				}
				if (Model.CanRenameScreen)
				{
					@:if (fieldType === 'SCREEN' && !menuItems["rename"]) menuItems["rename"] = { "name": "Rename", "icon": "edit" };
				}
				if (Model.CanRenameField)
				{
					@:if (fieldType !== 'WIZARD' && fieldType !== 'SCREEN' && !menuItems["rename"]) menuItems["rename"] = { "name": "Rename", "icon": "edit" };
				}
			}
			@if (Model.CanDeleteWizard || Model.CanDeleteScreen || Model.CanDeleteField)
			{
				if (Model.CanDeleteWizard)
				{
					@:if (fieldType === 'WIZARD' && !menuItems["delete"]) menuItems["delete"] = { "name": "Delete", "icon": "delete" };
				}
				if (Model.CanDeleteScreen)
				{
					@:if (fieldType === 'SCREEN' && !menuItems["delete"]) menuItems["delete"] = { "name": "Delete", "icon": "delete" };
				}
				if (Model.CanDeleteField)
				{
					@:if (fieldType !== 'WIZARD' && fieldType !== 'SCREEN' && !menuItems["delete"]) menuItems["delete"] = { "name": "Delete", "icon": "delete" };
				}
			}
			@if (Model.CanInsertWizard || Model.CanInsertScreen)
			{
				@:if (fieldType === 'SCREEN' || fieldType === 'WIZARD') addMenuSeparator(menuItems);
				if (Model.CanInsertWizard)
				{
					@:if (fieldType === 'WIZARD') menuItems['addwizard'] = { "name": "Add New Wizard", "icon": "add" };
				}

				if (Model.CanInsertScreen)
				{
					@:if (fieldType === 'SCREEN' || fieldType === 'WIZARD') menuItems['addscreen'] = { "name": "Add New Screen", "icon": 'add' };
				}
			}
			@if (Model.CanPreview)
			{
				// Add Preview menu item 
				<text>
				if (fieldType === 'SCREEN' || fieldType === 'WIZARD')  {
					addMenuSeparator(menuItems);
					menuItems['preview'] = { "name": "Preview", "icon": "play" };
				}
				</text>
			}
			@if (Model.CanExport)
			{
				// Add Export menu item 
				<text>
				if (fieldType === 'SCREEN' || fieldType === 'WIZARD')  {
					addMenuSeparator(menuItems);
					menuItems['export'] = { "name": "Export", "icon": "download" };
				}
				</text>
			}

			return menuItems;
		}



        function initFancyTree(target) {
	        var rexNoDrag = /(^HEADING_HEADING$|^HEADING_TEXT$|^BODY_HTML$|_BUTTONGROUP$)/i;
	        var rexNoDrop = /(^HEADING_HEADING$|^HEADING_TEXT$|^BODY_HTML$)/i;
			

	        $(target).fancytree({
		        source: onLoadTree,
		        activeVisible: true, // Make sure, active nodes are visible (expanded)
		        aria: true, // Enable WAI-ARIA support
		        autoActivate: true, // Automatically activate a node when it is focused using keyboard
		        autoCollapse: true, // Automatically collapse all siblings, when a node is expanded
		        autoScroll: true, // Automatically scroll nodes into visible area
		        clickFolderMode: 1, // 1:activate, 2:expand, 3:activate and expand, 4:activate (dblclick expands)
		        minExpandLevel: 2, //
		        icon: function(event, data) {
			        return !data.node.isTopLevel();
		        },
		        keydown: function(event, data) {
			        switch ($.ui.fancytree.eventToString(data.originalEvent)) {
			        case "return":
			        case "space":
				        data.node.toggleExpanded();
				        break;
			        }
		        },
				extensions: ["dnd5"],
		        dnd5: {
			        autoExpandMS: 1500, // Expand nodes after n milliseconds of hovering.
			        dropEffectDefault: "move", // Default dropEffect ('copy', 'link', or 'move')
			        // when no modifier is pressed (overide in dragDrag, dragOver).
			        multiSource: false, // true: Drag multiple (i.e. selected) nodes.
			        // Also a callback() is allowed to return a node list
			        preventForeignNodes: true, // Prevent dropping nodes from another Fancytree
			        preventLazyParents: true, // Prevent dropping items on unloaded lazy Fancytree nodes
			        preventRecursion: true, // Prevent dropping nodes on own descendants when in move-mode
			        preventVoidMoves: true, // Prevent moving nodes 'before self', etc.
			        scroll: true, // Enable auto-scrolling while dragging
			        scrollSensitivity: 20, // Active top/bottom margin in pixel
			        scrollSpeed: 5, // Pixel per event
			        dragStart: function(sourceNode, data) {
				        if (sourceNode.data && sourceNode.data.field_data) {
					        var fieldKey = (sourceNode.data.field_data.FieldKey || "") + '_' + (sourceNode.data.field_data.FieldType || "");
					        if (rexNoDrag.test(fieldKey)) {
						        return false;
					        }
				        }
				        return true;
			        }, // Callback(sourceNode, data), return true, to enable dragging
			        // Events (drop support)
			        dragEnter: function(targetNode, data) {
				        // Prevent moving over heading or body
				        if (targetNode.data && targetNode.data.field_data) {
					        var fieldKey = (targetNode.data.field_data.FieldKey || "") + '_' + (targetNode.data.field_data.FieldType || "");
					        if (rexNoDrop.test(fieldKey)) {
						        return false;
					        }
				        }

				        if (data['node'] && data.node['folder'])
					        return true;

				        return ["before", "after"];
			        }, // Callback(targetNode, data), return true, to enable dropping
			        dragDrop: function(targetNode, data) {
				        data.otherNode.moveTo(targetNode, data.hitMode);
				        var p = data.otherNode.parent;
				        var parentData = p.data["field_data"];
				        var children = p.children;
				        var aList = [];
				        var order = 1;
				        for (var i in children) {
					        if (children[i].data["field_data"]) {
						        var fieldData = children[i].data["field_data"];
						        fieldData["Order"] = order++;
						        fieldData["ParentKey"] = parentData["FieldKey"];
						        if (fieldData["Id"] > 0) {
							        aList[i] = fieldData;
						        }
					        }
				        }
				        saveNodeOrder(aList, data.otherNode.key);
				        return true;
			        }, // Callback(targetNode, data)
			        __: ''
		        }
			}).on("fancytreeactivate", onLoadTreeNode);

			$(target).contextMenu({
				selector: ".fancytree-title",
				zIndex: 1050,
				build: function ($trigger, e) {
					var node = $.ui.fancytree.getNode($trigger);
					var parentNode = node.parent || {};

					var fieldData = (node && node.data && node.data.field_data) ? node.data.field_data : {};
					var fieldType = (fieldData.FieldType || "").toUpperCase();
                    var parentData = (parentNode && parentNode.data && parentNode.data.field_data) ? parentNode.data.field_data : {};
					var menuItems = getContextMenu(fieldData);
					
					if ($.isEmptyObject(menuItems)) return false;

					@*
					var wizardKey = $('#slctWizard').val().toUpperCase() || "";

                    var fieldKey = (fieldData.FieldKey || "").toUpperCase();
					var parentKey = (fieldData.ParentKey || "").toUpperCase();
                    var parentType = (parentData.FieldType || "").toUpperCase();
					if (parentType === 'SCREEN'){
						if (fieldKey === 'BODY') {
							fieldType = 'BODY';
						}

						if (['HEADING', 'BODY', 'BUTTONGROUP'].includes(fieldType)) {
							return false;
						}

					}
					*@

					return {
						callback: function(action, options) {
							switch(action) {
								case 'addscreen':
									window.postMessage({ 'action': 'addScreen' });
									break;
                                case 'addwizard':
                                    window.postMessage({ 'action': 'addWizard' });
                                    break;
								case 'delete':
									window.postMessage({ 'action': 'deleteTreeNode', 'nodeId': node.key });
									break;
                                case 'duplicate':
	                                window.postMessage({ 'action': 'duplicateTreeNode', 'nodeId': node.key });
                                    break;
								case 'rename':
									window.postMessage({ 'action': 'renameTreeNode', 'nodeId': node.key });
									break;
								case 'preview':
									window.postMessage({ 'action': 'previewScreen', 'screenName': (fieldType === 'SCREEN') ? (fieldData.FieldKey || '') : '' });
									break;
								case 'export':
									window.postMessage({ 'action': 'export', 'screenName': (fieldType === 'SCREEN') ? (fieldData.FieldKey || '') : '' });
									break;
								default:
									bootbox.alert("This menu option has not yet been implemented.");
									break;
							}

						},
						items:  menuItems
					};
				}
			});
        }

        function saveNodeOrder(nodeList, fieldKey) {
	        t.post(t.urlApiRoot + "/SaveOrder", nodeList).always(function(data) {
		        window.postMessage({ 'action': 'updateTree', 'tree-id': fieldKey });
	        });
        }

        function onDragStart(event) {
	        placeholder.detach(); // Detach any existing placeholder from the DOM
	        placeholder.insertAfter(event.item); // add placeholder to DOM so the element can be reverted if need be.
        }

        function onDragEnterOverForFancyTree(event) {
	        var dt = event.originalEvent.dataTransfer;
	        if ($.inArray("application/x-fancytree-node", dt.types) >= 0) {
		        if ($.ui.fancytree.getDragNode()) {
			        dt.dropEffect = "move";
			        return false; // only accept Fancytree nodes
		        }
	        }
        }

        function onDropDelete(event, origEvent) {
			if (event instanceof CustomEvent && event.item) {
				// Event is a Sortable.js custom event
				var obj = $(event.item);
				obj.addClass('sortable-delete');
				window.postMessage({ 'action': 'deleteTreeNode', 'nodeId': obj.data('tree-id') });
				event.returnValue = false;
				return false;
			} else {
				var dt = event.originalEvent.dataTransfer, nodeData, jsonData;
				jsonData = dt.getData("application/x-fancytree-node");
				try {

					nodeData = JSON.parse(jsonData);
					if (nodeData && nodeData.key) {
						window.postMessage({ 'action': 'deleteTreeNode', 'nodeId': nodeData.key });
					}
				} catch (e) {
					return;
			}
			}
        }

        function onDragUpdate(event) {
            var nodes = [];
            var parent = $(event.to);
            var source = $(event.item);
            parent.children().each(function(i, elem) {
                var id = $(elem).data('tree-id');
                if (id) {
                    nodes.push(id);
                }
			});
			if (nodes) {
				var msg = { 'action': 'updateOrder', 'nodeIds': nodes, 'activeNodeId': source.data('tree-id') };
				window.postMessage(msg);
			}
        }

        function onAddDrop(event) {
            placeholder.detach();
            var target = $(event.to);
            var source = $(event.item);
            var isComponent = $('#componentlist').is($(event.from));
            var data = JSON.parse(JSON.stringify(source.data('wizardData')|| {}));
            var count = Date.now().valueOf();

            data['FieldKey'] += (isComponent) ? '':count;
            data['Label'] += (isComponent) ? '': ' ' + count;
            data['DefaultLabel'] = data['Label'];
            data['GroupKey'] = $('#slctWizard').val();
            data['ParentKey'] = target.closest('[data-field-key]').attr('data-field-key');
            data['Order'] = event.newIndex;

            if (!data["ParentKey"])
                return;

			// No need to render/redraw field, will redraw when AJAX finishes.

            window.postMessage({ 'action':'pleaseWait', 'show': true });
            t.post('@apiUrl/SaveField', data)
	            .done(function(data) {
		            var nodes = [];
		            target.children().each(function(i, elem) {
			            var id = $(elem).data('tree-id');
			            if (id) {
				            nodes.push(id);
			            }
		            });
		            var msg = { 'action': 'updateOrder', 'nodeIds': nodes, 'activeNodeId': data['Id'] };
		            window.postMessage(msg);
	            })
	            .always(function(data) {
					window.postMessage({ 'action':'pleaseWait', 'show': false });
	            });
        }

		function onControlPull(to, from, clone, event) {
			var $source = $(clone);
	        var type = ($source.data('field-type') || "").toLowerCase();
			var groupName = to.options.group['name'];
			if (event && event.preventDefault) event.preventDefault();
	        switch (groupName) {
	        case 'wizardForms':
		        if (validFormTypes.indexOf(type) >= 0) {
			        return 'clone';
		        }
		        break;
	        case 'wizardFormFields':
		        if (validFormFieldTypes.indexOf(type) >= 0) {
			        return 'clone';
		        }
		        break;
	        case 'wizardButtons':
		        if (validButtonTypes.indexOf(type) >= 0) {
			        return 'clone';
		        }
		        break;
			}

			if (event && event.dataTransfer) {
				event.dataTransfer.effectAllowed = 'none';
				event.dataTransfer.dropEffect = 'none';
			}
	        return false;
        }

        function initWizardDragDrop() {
            clientFrameWindow = $('#preview-frame').get(0).contentWindow;
            clientFrameBody = $(clientFrameWindow.document.body);
	        var elWizardButton = clientFrameBody.find('.wizard-buttons').get(0);
			var elWizardBody = clientFrameBody.find('.wizard-body').get(0);
            if (!Sortable.get(elWizardBody)) {
		        Sortable.create(elWizardBody, {
			        group: {
				        name: 'wizardForms',
				        pull: ['deleteDropZone'],
				        put: ['controlList', 'componentList']
			        },
			        onStart: onDragStart,
			        onAdd: onAddDrop,
			        onUpdate: onDragUpdate,
			        filter: '.form-body',
			        handle: '.card-header',
			        animation: 100
				});
			}

			if (!Sortable.get(elWizardButton)) {
		        Sortable.create(elWizardButton, {
			        group: {
				        name: 'wizardButtons',
				        pull: ['deleteDropZone'],
				        put: ['controlList', 'componentList']
			        },
			        onStart: onDragStart,
			        onAdd: onAddDrop,
			        onUpdate: onDragUpdate,
			        animation: 100
		        });
			}

	        clientFrameBody.find('.wizard-body .form-body').each(function(i, el) {
				if (el) {
					if (!Sortable.get(el)) {
				        Sortable.create(el, {
					        group: {
						        name: 'wizardFormFields',
						        pull: ['deleteDropZone', 'wizardFormFields'],
						        put: ['controlList', 'componentList', 'wizardFormFields']
					        },
					        onStart: onDragStart,
					        onAdd: onAddDrop,
					        onUpdate: onDragUpdate,
					        animation: 100
						});
					}
		        }
	        });
        }

        function initDragDrop() {
	        clientFrameWindow = $('#preview-frame').get(0).contentWindow;
	        clientFrameBody = $(clientFrameWindow.document.body);
	        var elDeleteDropzone = $('#deleteDropZone').get(0);
	        var elControlList = $('#controllist').get(0);
	        var elComponentList = $('#componentlist').get(0);

	        if (!elDeleteDropzone || !elControlList || !elComponentList) {
		        window.setTimeout(function() { initDragDrop(); }, 100);
		        return;
			}
            if (!Sortable.get(elDeleteDropzone)) {
		        Sortable.create(elDeleteDropzone,
			        {
				        group: {
					        name: 'deleteDropZone',
					        put: true
				        },
	                    onAdd: onDropDelete,
				    ghostClass: 'sortable-delete',
	                animation: 0,
	                sort: false
	            });
			}

			if (!Sortable.get(elControlList)) {
	            Sortable.create(elControlList, {
	                group: {
	                    name: 'controlList',
	                    pull: onControlPull,
	                    revertClone: true
	                },
	                sort: false,
	                animation: 100
	            });
			}

			if (!Sortable.get(elComponentList)) {
	            Sortable.create(elComponentList, {
	                group: {
	                    name: 'componentList',
	                    pull: onControlPull,
	                    revertClone: true
	                },
	                sort: false,
	                animation: 100
	            });
			}
        }

		@*// ReSharper disable InconsistentNaming*@
        function _fnOnRemoveFancyTreeNode(nodeId, obj) {
	        var tree = $.ui.fancytree.getTree("#wizardtree");
	        var node = tree.getNodeByKey(nodeId);
	        var fieldName, groupKey, fieldType;
	        if (obj) {
		        var matches = reContainerId.exec(obj.attr('id'));
		        if (matches && matches.length > 5) {
			        fieldType = matches[3];
			        groupKey = matches[2];
			        fieldName = matches[4];
		        };
	        } else if (node && node.data && node.data.field_data) {
		        fieldName = node.data.field_data['FieldKey'];
		        fieldType = node.data.field_data['FieldType'];
		        groupKey = node.data.field_data['GroupKey'];
	        }

	        if (!fieldName || !fieldType || !groupKey) {
		        if (obj) {
			        obj.removeClass('sortable-delete');
			        obj.insertBefore(placeholder);
		        }
		        placeholder.detach();
		        return;
			}

            var txt = "Remove the field '" + fieldName + "' from the screen? (Please note: this action cannot be undone)";
	        switch (fieldType.toUpperCase()) {
				case 'WIZARD':
					var wizardName = fieldName;
					try {
						var reFilterPrefix = new RegExp("^@(Model.HiddenFilterPrefix)", "ig");
						wizardName = wizardName.replace(reFilterPrefix, '');
					} catch (e) { }

                    txt = "Remove the wizard '" + wizardName + "'? (Please note: this action cannot be undone)";
					break;
				case 'SCREEN':
					txt = "Remove the screen '" + fieldName + "' from the wizard? (Please note: this action cannot be undone)";
					break;
				case 'FORM':
					txt = "Remove the form '" + fieldName + "' from the screen? (Please note: this action cannot be undone)";
					break;
	        }

	        bootbox.confirm(txt,
		        function (val) {
			        if (val) {
				        var data = { 'Id': nodeId, FieldType: fieldType, GroupKey: groupKey, FieldName: fieldName };
				        t.post('@apiUrl/DeleteField', data)
					        .done(function(data) {
						        placeholder.detach();
						        if (obj) {
							        obj.remove();
						        }

					        })
					        .fail(function () {
						        if (obj) {
							        obj.removeClass('sortable-delete');
							        obj.insertBefore(placeholder);
						        }
						        placeholder.detach();
					        })
					        .always(function() {
						        tree.getNodeByKey(nodeId).remove();
								if (fieldType.toUpperCase() == 'WIZARD')
									onLoadWizard();
								else
									window.postMessage({ 'action': 'updateTree', 'tree-id': $(event.from).children().data('tree-id') || $(event.from).closest('[data-field-key]').data('tree-id') });
						        t.hidePleaseWait();
					        });
			        }
		        }
	        );

        }

        function _fnOnDuplicateFancyTreeNode(nodeId) {
	        var tree = $.ui.fancytree.getTree("#wizardtree");
	        var node = tree.getNodeByKey(nodeId);
	        var fieldData = node.data['field_data'];
	        var fieldKey = fieldData['FieldKey'];
	        var fieldType = fieldData['FieldType'];
	        var groupKey = fieldData['GroupKey'];
	        var parentKey = fieldData['ParentKey'];
	        var fieldName = '';
	        if (node && node.data && node.data.field_data) {
		        fieldName = node.data.field_data['FieldKey'];
                fieldKey = node.data.field_data['FieldKey'];
		        fieldType = node.data.field_data['FieldType'];
		        groupKey = node.data.field_data['GroupKey'];
	        }

	        if (!fieldName || !fieldType || !groupKey) {
		        placeholder.detach();
		        return;
			}

            var txt = "Duplicate the field '" + fieldName + "'?";
	        switch (fieldType.toUpperCase()) {
				case 'WIZARD':
					var wizardName = fieldName;
					try {
						var reFilterPrefix = new RegExp("^@(Model.HiddenFilterPrefix)", "ig");
						wizardName = wizardName.replace(reFilterPrefix, '');
					} catch (e) { }

                    txt = "Duplicate the wizard '" + wizardName + "'?";
					break;
				case 'SCREEN':
					txt = "Duplicate the screen '" + fieldName + "'?";
					break;
				case 'FORM':
					txt = "Duplicate the form '" + fieldName + "'?";
					break;
	        }

	        bootbox.dialog({
		        title: txt,
		        message: '<div class="form-group"><label>New Name</label><input type="text" name="NewFieldKey" class="form-control" value="' + (fieldKey || '').replace('"', '\\"').replace('\\', '\\\\') + '" /></div>',
		        inputType: 'text',
		        size: 'md',
		        buttons: {
			        confirm: {
				        label: '<span class="fa fa-save"></span> Rename',
				        className: 'btn-success',
				        callback: function(event) {
					        var formData = t.serializeFormToJson($('.modal-body', this));
					        formData['Id'] = nodeId;
					        formData['FieldKey'] = fieldKey;
					        formData['FieldType'] = fieldType;
					        formData['GroupKey'] = groupKey;
					        formData["ParentKey"] = parentKey;
					        t.post(t.urlApiRoot + "/DuplicateField", formData)
						        .always(function(data) {
							        if (fieldType.toUpperCase() == 'WIZARD')
								        onLoadWizard();
							        else
								        window.postMessage({ 'action': 'updateTree', 'tree-id': $(event.from).children().data('tree-id') || $(event.from).closest('[data-field-key]').data('tree-id') });
							        t.hidePleaseWait();
						        });
				        }
			        },
			        cancel: {
				        label: '<span class="fa fa-ban"></span> Cancel',
				        className: 'btn-danger'
			        }
		        }

	        });

        }

        function _fnOnNewWizard(event) {
            var dialog = bootbox.dialog({
                title: 'Add new Wizard',
                message: '<div class="form-group"><label>Wizard Name</label><input type="text" name="FieldKey" class="form-control" /></div>',
                inputType: 'text',
                size: 'md',
                buttons: {
                    confirm: {
                        label: '<span class="fa fa-save"></span> Save',
                        className: 'btn-success',
                        callback: function(event) {
                            var formData = t.serializeFormToJson($('.modal-body', this));
                            formData['GroupKey'] = formData['FieldKey'];
                            t.post(t.urlApiRoot + "/NewWizard", formData)
                                .always(function(data) {
                                    var key = data['GroupKey'];
                                    if (key) {
                                        t.get(t.urlApiRoot + "/List").done(function(data) {
                                            var target = $('#slctWizard');
                                            target.empty();

                                            for (var i in data) {
                                                var fieldData = data[i];
                                                var text = fieldData["GroupKey"] || "";
                                                try {
	                                                var reFilterPrefix = new RegExp("^@(Model.HiddenFilterPrefix)", "ig");
	                                                text = text.replace(reFilterPrefix, '');
                                                } catch (e) { }

                                                var opt = $('<option value="' + fieldData["GroupKey"] + '">' + text + '</option>');

												opt.attr('data-field-data', fieldData);
                                                target.append(opt);
                                            }
                                            target.val(key);
                                            target.trigger('change');
                                        });
                                    }
                            });

                        }
                    },
                    cancel: {
                        label: '<span class="fa fa-ban"></span> Cancel',
                        className: 'btn-danger'
                    }
                }

            });

        }

		function _fnOnNewScreen() {
	        return bootbox.dialog({
		        title: 'Add new Screen',
		        message: '<div class="form-group"><label>Screen Name</label><input type="text" name="FieldKey" class="form-control" /></div>',
		        inputType: 'text',
		        size: 'md',
		        buttons: {
			        confirm: {
				        label: '<span class="fa fa-save"></span> Save',
				        className: 'btn-success',
				        callback: function(event) {
					        var formData = t.serializeFormToJson($('.modal-body', this));
					        formData['GroupKey'] = $('#slctWizard').val();
					        formData["ParentKey"] = $('#slctWizard').val();
					        t.post(t.urlApiRoot + "/NewScreen", formData)
						        .always(function(data) {
							        var key = data['Id'];
							        if (key) {
								        window.postMessage({ 'action': 'updateTree', 'tree-id': key});
							        }
						        });

				        }
			        },
			        cancel: {
				        label: '<span class="fa fa-ban"></span> Cancel',
				        className: 'btn-danger'
			        }
		        }

	        });
        }

        function _fnOnRenameTreeNode(nodeId) {
            var tree = $.ui.fancytree.getTree("#wizardtree");
            var node = tree.getNodeByKey(nodeId);
			var fieldData, fieldKey, groupKey, fieldType, parentKey;
            fieldData = node.data['field_data'];
            fieldKey = fieldData['FieldKey'];
            fieldType = fieldData['FieldType'];
            groupKey = fieldData['GroupKey'];
            parentKey = fieldData['ParentKey'];


	        var dialog = bootbox.dialog({
				title: 'Rename',
				message: '<div class="form-group"><label>New Name</label><input type="text" name="NewFieldKey" class="form-control" value="' + (fieldKey || '').replace('"', '\\"').replace('\\', '\\\\') + '" /></div>',
		        inputType: 'text',
		        size: 'md',
		        buttons: {
			        confirm: {
				        label: '<span class="fa fa-save"></span> Rename',
				        className: 'btn-success',
				        callback: function(event) {
							var formData = t.serializeFormToJson($('.modal-body', this));
                            formData['Id'] = nodeId;
							formData['FieldKey'] = fieldKey;
                            formData['FieldType'] = fieldType;
					        formData['GroupKey'] = groupKey;
					        formData["ParentKey"] = parentKey;
					        t.post(t.urlApiRoot + "/RenameField", formData)
						        .always(function(data) {
							        window.postMessage({ 'action': 'updateTree', 'tree-id': nodeId });
							        t.hidePleaseWait();
						        });
				        }
			        },
			        cancel: {
				        label: '<span class="fa fa-ban"></span> Cancel',
				        className: 'btn-danger'
			        }
		        }

	        });
        }
		
		function _fnOnExportScreen(screenName) {
	        window.open("@(Model.ExportUrl?.TrimEnd('/'))/" + $('#slctWizard').val() + '/' + screenName, "jlwLocalizedContent_ScreenExport", 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=yes, copyhistory=no', true);
		
		}

        function _fnOnPreviewScreen(screenName) {
	        var w = 640;
	        var h = 480;
	        var args = '';

	        if ($('#showWizardNav').is(':checked')) args += (args ? '&' : '') + 'showNav=1';
	        if ($('#showWireframe').is(':checked')) args += (args ? '&' : '') + 'wireframe=1';

	        if (window.screen || window.screen.availWidth) w = window.screen.availWidth;
	        if (window.screen || window.screen.availHeight) h = window.screen.availHeight;

	        w = Math.min(Math.max(window.screen.availWidth, w), 2000);
	        h = Math.min(Math.max(h, 480), 1800);


	        args = (args ? '?' : '') + args;
	        window.open("@(Model.PreviewScreenUrl?.TrimEnd('/'))/" + $('#slctWizard').val() + '/' + screenName + args, "jlwLocalizedContent_ScreenPreview", 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=yes, copyhistory=no, width=' + (w * 0.8) + ', height=' + (h * 0.8) + ', left=' + ((w * 0.1)) + ', top=' + ((h * 0.1)), true);
        }

        function _fnOnUpdateFieldOrder(nodes, activeNodeId) {
            var tree = $.ui.fancytree.getTree("#wizardtree");
			var nodeList = [];
            if (Array.isArray(nodes)) {
                // Find minimum order value
                var minOrder = undefined;
                var i;
                var key;
                var node;
                var fieldData;
                for (i = 0; i < nodes.length; i++) {
                    key = nodes[i];
                    if (key) {
                        node = tree.getNodeByKey(key);
                        if (node) {
                            fieldData = node.data['field_data'];
                            if (fieldData) {
                                if (typeof(minOrder) !== 'undefined') {
                                    minOrder = Math.min(parseInt(fieldData.Order), minOrder);
                                } else {
                                    minOrder = parseInt(fieldData.Order);
                                }
                            }
                        }
                    }
                }

                // Reorder fields starting with the current minimum order value
                for (i = 0; i < nodes.length; i++) {
                    key = nodes[i];
                    if (key) {
                        node = tree.getNodeByKey(key);
                        if (node) {
                            fieldData = node.data['field_data'];
                            if (fieldData) {
                                fieldData.Order = minOrder + i;
                                nodeList.push(fieldData);
                            }
                        }
                    }
                }
                if (nodeList.length) {
                    t.post("@apiUrl/SaveOrder", nodeList).always(function(data) {
	                    window.postMessage({ 'action': 'updateTree', 'tree-id': activeNodeId });
                    });
                } else {
	                window.postMessage({ 'action': 'updateTree', 'tree-id': activeNodeId });
                }
			}
        }


        function processWindowMessages(event) {
            // IMPORTANT: Check the origin of the data!
            if (event.origin.indexOf('@String.Format(" {0}://{1}", Context.Request.Scheme, Context.Request.Host)')) {
                // The data has been sent from your site

                var tree = $.ui.fancytree.getTree("#wizardtree");

                // The data sent with postMessage is stored in event.data
				switch (event.data['action']) {
					case 'pleaseWait':
						if (event.data['show'])
							t.showPleaseWait();
						else
							t.hidePleaseWait();

						break;
					case 'updateOrder':
						var nodes = event.data['nodeIds'];
                        _fnOnUpdateFieldOrder(nodes, event.data['activeNodeId']);
	                    break;
	                case 'updateTree':
	                    if (tree) {
	                        tree.reload().always(function(data) {
	                            tree.activateKey(0, { activeVisible: true });
	                            tree.activateKey(event.data['tree-id'] || $(clientFrameBody.find('.wizard-form')).data('tree-id'), { activeVisible: true });
	                        });
	                    }
	                    break;
	                case 'click':
	                    var data = event.data["elementData"];
	                    if (data['Id']) {
	                        //window.postMessage({ 'action': 'updateTree', 'tree-id': data['Id']});
	                        tree.activateKey(data['Id'], { activeVisible: true });
	                    }
	                    break;
	                case 'onRenderWizard':
		                initWizardDragDrop();
		                if ($('#showWireframe').is(':checked')) {
	                        clientFrameBody.addClass('bootstrap-sketchy');
	                    } else {
	                        clientFrameBody.removeClass('bootstrap-sketchy');
	                    }

                        var offset = $('#preview-frame').offset() || {top:0,left:0};

                        $(clientFrameBody).contextMenu({
                            selector: "[data-tree-id]",
							zIndex: 1050,
							/*
							events: {
                                activated: function (options) {
                                    //options.$menu.css('z-index', 950);
                                }
							},
							*/
                            position: function(opt, x, y){
								var offset = $('#preview-frame').offset() || {top:0,left:0};
								offset['top'] -= $(clientFrameWindow).scrollTop();
	                            opt.$menu.css({top: y+offset['top'], left: x+offset['left']});
                            }, 
                            build: function ($trigger, e) {
                                var node = tree.getNodeByKey($trigger.data('tree-id'));
                                var fieldData = (node && node.data && node.data.field_data) ? node.data.field_data : {};
								var fieldType = (fieldData.FieldType || "").toUpperCase();
								var menuItems = getContextMenu(fieldData);
								if ($.isEmptyObject(menuItems)) return false;

								@*
                                var parentNode = node.parent || {};
                                var parentData = (parentNode && parentNode.data && parentNode.data.field_data) ? parentNode.data.field_data : {};
								
								var menuItems = {
	                                "duplicate": { "name": "Duplicate", "icon": "copy" },
	                                "rename" : { "name": "Rename", "icon": "edit" },
	                                "delete": { "name": "Delete", "icon": "delete" }
                                };
                                var wizardKey = $('#slctWizard').val().toUpperCase() || "";

                                var fieldKey = (fieldData.FieldKey || "").toUpperCase();
                                var parentKey = (fieldData.ParentKey || "").toUpperCase();
                                var parentType = (parentData.FieldType || "").toUpperCase();
                                if (parentType === 'SCREEN'){
	                                if (fieldKey === 'BODY') {
		                                fieldType = 'BODY';
	                                }

	                                if (['HEADING', 'BODY', 'BUTTONGROUP'].includes(fieldType)) {
		                                delete menuItems['duplicate'];
                                        delete menuItems['rename'];
                                        delete menuItems['delete'];
                                        menuItems['preview'] = { "name": "Preview", "icon": "play" };
	                                }

                                }
                                if (fieldType === 'SCREEN' || fieldType === 'WIZARD') {
	                                menuItems['sep1'] = "---------";
	                                if (fieldType === 'WIZARD') {
		                                menuItems['addwizard'] = { "name": "Add New Wizard", "icon": "add" };
		                                delete menuItems['rename'];
	                                }
	                                menuItems['addscreen'] = { "name": "Add New Screen", "icon": 'add' };

	                                menuItems['sep2'] = "---------";
	                                menuItems['preview'] = { "name": "Preview", "icon": "play" };
                                }
								
								if ($.isEmptyObject(menuItems)) menuItems['sep1'] = "---------";
								*@

                                return {
                                    callback: function (action, options) {
                                        switch (action) {
                                            case 'delete':
                                                window.postMessage({ 'action': 'deleteTreeNode', 'nodeId': node.key });
                                                break;
                                            case 'duplicate':
                                                window.postMessage({ 'action': 'duplicateTreeNode', 'nodeId': node.key });
                                                break;
                                            case 'rename':
                                                window.postMessage({ 'action': 'renameTreeNode', 'nodeId': node.key });
                                                break;
                                            case 'preview':
                                                window.postMessage({ 'action': 'previewScreen', 'screenName': (fieldType === 'SCREEN') ? (fieldData.FieldKey || '') : '' });
                                                break;
                                            default:
                                                bootbox.alert("This menu option has not yet been implemented.");
                                                break;
                                        }

                                    },
                                    items: menuItems
                                };
                            }
                        });



	                    break;
					case 'deleteTreeNode':
						_fnOnRemoveFancyTreeNode(event.data['nodeId']);
						break;
                    case 'duplicateTreeNode':
                        _fnOnDuplicateFancyTreeNode(event.data['nodeId']);
                        break;
	                case 'addScreen':
		                _fnOnNewScreen();
		                break;
					case 'addWizard':
						_fnOnNewWizard();
						break;
	                case 'previewScreen':
		                _fnOnPreviewScreen(event.data['screenName']);
		                break;
	                case 'export':
		                _fnOnExportScreen(event.data['screenName']);
		                break;
					case 'renameTreeNode':
						_fnOnRenameTreeNode(event.data['nodeId']);
						break;
                }
            } else {
                // The data hasn't been sent from your site!
                // Be careful! Do not use it.
                return;
            }
			return;
        }

        initFancyTree("#wizardtree");
        $(".dad-drop-zone").on("dragenter dragover", onDragEnterOverForFancyTree).on('drop', onDropDelete);

        $('#slctWizard').on('change', onChangeWizard);
        $('#showWizardNav').on('change', onShowWizardNav);
        $('#showWireframe').on('change', onShowWireframe);

        window.addEventListener('message', processWindowMessages);

        onLoadWizard({});

        initDragDrop();
		
		@if (Model.CanInsertWizard)
		{
			@:$('#new-wizard-btn').on('click', function () { postMessage({ 'action': 'addWizard' }); });
		}
		else
		{
			@:$('#new-wizard-btn').prop('disabled', true);
		}

		@if (true || Model.CanInsertScreen)
		{
			@:$('#new-screen-btn').on('click', function(){ postMessage({'action':'addScreen'}); });
		}
		else
		{
			@:$('#new-screen-btn').prop('disabled', true);
		}
	}
</script>