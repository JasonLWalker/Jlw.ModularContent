@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Jlw.Utilities.Data
@using Microsoft.Extensions.DependencyInjection
@using Newtonsoft.Json.Linq
@using Jlw.ModularContent
@inject IModularWizardFactoryRepository FactoryRepository
@model ModularWizardPreviewSettings
@{
    ViewData["Title"] = ViewData["PageTitle"];
    Layout = "_EmptyLayout";

	string version = Model?.Version ?? ""; 
	string apiUrl = Model?.ApiOverrideUrl;

    string jsRoot = ModularContentExtensions.AreaName;

    var sideNav = Model?.SideNav.Items;
	string wizardName = string.IsNullOrWhiteSpace(Model?.Wizard) ? Model?.DefaultWizard ?? "" : Model.Wizard;
	var modelFields = FactoryRepository.GetWizardModelFields(wizardName, Model?.GroupFilter);
}
<div class="row h-100">
    <div class="d-none d-lg-inline-block wizard-nav-col col-lg-auto border-right">
        <form method="post">
            <input type="hidden" name="st" value="1" />
            <div class="list-group wizard-nav">
	            @{
		            foreach (var item in sideNav)
		            {
			            if (!item.IsHidden && !string.IsNullOrWhiteSpace(item.Label))
			            {
				            JToken fieldData;
				            string navClass = "";
				            try
				            {
					            fieldData = JToken.Parse(item.FieldData);
					            navClass = (fieldData["sideNav"]?.HasValues ?? false) ? DataUtility.ParseString(fieldData["sideNav"], "class") : "";
				            } catch { /* Jquery Parsing error, do nothing */ }
                                    <button type="button" data-section="@item.Section" data-step="@item.Step" data-screen="@item.Screen" data-wizard="@item.Wizard" class="list-group-item list-group-item-action @navClass"> @Html.Raw(item.Label)</button>
			            }
		            }
	            }
            </div>
        </form>
    </div>
    <div class="col-md wizard-form">
        <form method="post">
            <div class="h3 wizard-heading">@(ViewData["Heading"] ?? ViewData["Title"])</div>
            <div class="wizard-body">
                <div class="p-0">
                    <div class="h5"><span class="fa fa-exclamation-triangle text-warning"></span>&nbsp;No content loaded, please select a wizard from the toolbar at the left.</div>
                    <input type="hidden" name="step" value="" />
                    <input type="hidden" name="section" value="" />
                    @{
	                    foreach (var field in modelFields)
	                    {
		                    <input type="hidden" name="@field" value="" />
	                    }
                    }
                </div>
            </div>
            <div class="wizard-buttons row">
            </div>
        </form>
    </div>
</div>
<script src="@Url.Action("WizardLibScript", "ModularWizardJs")?_=@version"></script>
@section Scripts {
	@Html.PartialAsync("~/Areas/ModularContentWizardAdmin/Views/WizardAdmin/_AdminCss.cshtml").Result
	<style>
		html, body, .container, main {
			height: 100%;
		}

		.wizard-body, .wizard-buttons, .form-body, .card-body > div {
			min-height: 30px;
		}


		.wizard-nav {
			min-width: 195px;
		}

		.wizard-form .d-none {
			display: block !important;
			opacity: 0.3;
		}

		.dad-placeholder {
			background-color: #eee;
			border: 2px dashed #aaa;
			outline: none;
		}

		.sortable-ghost {
			background-color: #eee;
			border: 2px dashed #aaa;
			outline: none !important;
		}

		.sortable-ghost > * {
			visibility: hidden;
		}

		.sortable-chosen {
		}

		.sortable-drag {
			outline: none !important;
			border: none;
		}

		[id^="jlwContainer-"], [id^="jlwElement-"] {
			cursor: pointer;
		}

		.hover-outline {
			outline: 1px dashed darkred;
		}

		.embed-body .hover-outline {
			outline: none !important;
			cursor: default;
		}


		[id^='jlwContainer-'].active, [id^='jlwElement-'].active {
			outline: 1px dotted red;
		}

		.form-check-label {
			display: block;
		}
	</style>

    <link rel="stylesheet" href="~/@jsRoot/css/bootstrap-sketchy.min.css?_=@version">


    <script src="~/@jsRoot/js/libJlwUtility.min.js?_=@version"></script>
    <script src="~/@jsRoot/font-awesome/js/solid.min.js?_=@version"></script>
    <script src="~/@jsRoot/font-awesome/js/fontawesome.min.js?_=@version"></script>
    <script src="~/@jsRoot/js/toastr.min.js?_=@version"></script>
    <link rel="stylesheet" href="~/@jsRoot/css/toastr.min.css?_=@version"></link>
	<script>
        // Jquery plugin from https://newbedev.com/change-the-tag-but-keep-the-attributes-and-content-jquery-javascript
        (function (a) {
            a.fn.replaceTagName = function (f) {
                var g = [],
                    h = this.length;
                while (h--) {
                    var k = document.createElement(f),
                        b = this[h],
                        d = b.attributes;
                    for (var c = d.length - 1; c >= 0; c--) {
                        var j = d[c];
                        k.setAttribute(j.name, j.value);
                    }
                    k.innerHTML = b.innerHTML;
                    a(b).after(k).remove();
                    g[h - 1] = k;
                }
                return a(g);
            }
        })(window.jQuery);
    </script>
	<script>
        (function(cacheVer) {
            var wizardData = {};
            var dragData = {
                currElem: undefined,
                dragOverElem: undefined,
                height: 0,
                width: 0,
                placeholderElem: undefined
            };

            var libWizard = window.libJlwWizardBase(new window.libJlwUtility() || {},
                window.jQuery,
                {
                    'urlRoot': '@Html.Raw(Url.Action("Index", "Home", new { Area = "" }))',
                    'urlApiRoot': '@apiUrl',
                    'onRenderWizardFormField': onRenderWizardFormField,
                    'onRenderWizardElement': onRenderWizardElement,
                    'onRenderWizard': onRenderWizard,
                    'wizardParent': '.wizard-form'
                }
            );
            libWizard.fnOnWizardOnLoad = null;

            function onDragOver(evt) {
                if (dragData.dragOverElem === evt.currentTarget)
                    return;

                var oEvt = evt.originalEvent;
                dragData.dragOverElem = evt.currentTarget;

                oEvt.dataTransfer.dropEffect = 'move';
                $(dragData.placeholderElem).insertAfter($(dragData.dragOverElem));
            }

            function onRenderWizardFormField(obj, data, parent) {
                var o = $(obj);
                o.data('wizard-data', data);
                
                var cntrl = $('input, button, textarea, select', o);
                cntrl.attr('data-field-type', (data['FieldType']||"").toLowerCase());
                $('input, button, textarea, select', o).replaceTagName('div');


                var p = o.closest('[id^="jlwContainer-"]');
                p.data('wizard-data', data);
                p.off()
                    .on('click', fnOnClickElement)
                    .on('mouseover', fnOnMouseOverElement)
                    .on('mouseout', fnOnMouseOutElement);
                p.data('tree-id', data['Id']);
                p.attr('data-tree-id', data['Id']);

                return obj;
            }

            function onRenderWizardElement(obj, data, parent) {
                var o = $(obj);
                if (o.prop("tagName").toUpperCase() === 'BUTTON') {
                    var id = o.prop('id');
                    o.replaceTagName('div');
                    o = $("#" + id, parent);
                }

                if (o.is("[id^='jlwContainer-'],[id^='jlwElement-']")) {
                    o.off()
                        .on('click', fnOnClickElement)
                        .on('mouseover', fnOnMouseOverElement)
                        .on('mouseout', fnOnMouseOutElement);
                    o.data('wizard-data', data);
                    o.data('tree-id', data['Id']);
                    o.attr('data-tree-id', data['Id']);

                } else {
                    var p = o.parent('[id^="jlwContainer-"]');
                    p.data('wizard-data', data);
                    p.off()
                        .on('click', fnOnClickElement)
                        .on('mouseover', fnOnMouseOverElement)
                        .on('mouseout', fnOnMouseOutElement);
                    p.data('tree-id', data['Id']);
                    p.attr('data-tree-id', data['Id']);
                    //p.attr('draggable', true);
                }

                o.attr('data-field-key', data['FieldKey']);
                return o;
            }

            function onRenderWizard(obj, data, parent) {
                var o = $(obj);

                $('.wizard-form').attr('data-field-key', data['FieldKey']);
                $('.wizard-form').attr('data-tree-id', data['Id']);

                var msg = { 'action': 'onRenderWizard' };
                window.parent.postMessage(msg);


                return o;
            }

            function fnOnDragDrop(evt, targetElement, origEvent) {
                var target = $(evt.currentTarget);
                var nodes = [];
                target.children().each(function(i) {
                    nodes.push($(this).data('tree-id'));
                });
                var msg = { 'action': 'updateOrder', 'nodeIds': nodes, 'activeNodeId': $(targetElement).data('tree-id') };
                window.parent.postMessage(msg);
            }

            function fnOnClickElement(evt) {
                var obj = $(evt.target).closest("[id^='jlwContainer-'],[id^='jlwElement-']");
                if ($(evt.target).closest(".embed-body")[0])
					return;

                if (obj.is("[id^='jlwContainer-'],[id^='jlwElement-']")) {
                    $("[id ^= 'jlwContainer-'], [id ^= 'jlwElement-']").removeClass('active');
                    obj.addClass('active');
                    window.parent.postMessage({ elementData: obj.data('wizard-data'), action: 'click', 'elementId': obj.prop('id') });
                }
            };

            function fnOnMouseOverElement(evt) {
                var o = $(evt.target).closest("[id^='jlwContainer-'],[id^='jlwElement-']");
                o.addClass('hover-outline');
            };

            function fnOnMouseOutElement(evt) {
                var o = $(evt.target).closest("[id^='jlwContainer-'],[id^='jlwElement-']");
                o.removeClass('hover-outline');
            };

            window.addEventListener('message',
                function(event) {
                    // IMPORTANT: Check the origin of the data!
                    if (event.origin.indexOf('@String.Format(" {0}://{1}", Context.Request.Scheme, Context.Request.Host)')) {
                        // The data has been sent from your site
                        switch (event.data['action']) {
	                        case 'buildSideNav':
								var navData = event.data['navData'];
								if(navData && $('.wizard-nav-col').length) {
                                    $('.wizard-nav-col').empty();
                                    for(var i =0; i < navData.length; i++ ) {
                                        var fieldData = navData[i]['field_data'];
                                        var sideNavData = (fieldData['FieldData'] && fieldData.FieldData['sideNav']) ? fieldData.FieldData.sideNav : {};
                                        if ((fieldData['FieldType'] || "").toLowerCase() == "screen" && (fieldData['Label']).trim() && !(sideNavData["hidden"] || false)) {
                                            $('.wizard-nav-col').append($('<button type="button" data-section="0" data-step="0" data-screen="' + fieldData['FieldKey'] + '" data-wizard="' + fieldData['GroupKey'] + '" class="list-group-item list-group-item-action ' + sideNavData['class'] + '">' + fieldData['Label'] + '</button>'));
                                        }
                                    }
	                            }
                                break;
	                        case 'showSideNav':
	                            if (event.data['value']) {
	                                $('.wizard-nav-col').addClass('d-xl-block d-lg-inline-block');
	                            } else {
	                                $('.wizard-nav-col').addClass('d-none');
	                                $('.wizard-nav-col').removeClass('d-xl-block d-lg-inline-block');
	                            }

	                            break;
	                        case 'loadWizard':
	                            // The data sent with postMessage is stored in event.data
	                            var data = event.data["wizardData"];
	                            libWizard.renderWizard(0, 0, data);
	                            //var wizardData = data;
	                            var nodeData = event.data['nodeData'];
	                            var groupKey = nodeData['GroupKey'];
	                            var fieldKey = nodeData['FieldKey'];
	                            var fieldType = nodeData['FieldType'];
	                            var fieldId = nodeData['Id'];
	                            var id = (groupKey + '-' + fieldType + '-' + fieldKey + '-' + fieldId).replace(/[^\w\d-_]/i, '');

	                            $("[id^='jlwContainer-" + id + "'],[id^='jlwElement-" + id + "']").addClass('active');

	                            break;
                        }
                    } else {
                        // The data hasn't been sent from your site!
                        // Be careful! Do not use it.
                        return;
                    }
                    return;
                });
        })('');
    </script>
	<script>
        $(function () {
            var msg = { 'action': 'onPreviewLoad' };
            window.parent.postMessage(msg);
        });
    </script>
}
